--- work/src/org/xadisk/filesystem/NativeXAFileSystem.java	(revision 557)
+++ work/src/org/xadisk/filesystem/NativeXAFileSystem.java	(working copy)
@@ -457,7 +457,7 @@
         gatheringDiskWriter.deInitialize();
         fileSystemEventDelegator.release();
         transactionTimeoutDetector.release();
-        if(configuration.getEnableRemoteInvocations()) {
+        if(getHandleClusterRemoteInvocations() || getHandleGeneralRemoteInvocations()) {
             pointOfContact.release();
         }
         deadLetter.release();

--- work/src/org/xadisk/connector/inbound/LocalEventProcessingXAResource.java	(revision 557)
+++ work/src/org/xadisk/connector/inbound/LocalEventProcessingXAResource.java	(working copy)
@@ -1,5 +1,5 @@
 /*
-Copyright © 2010-2011, Nitin Verma (project owner for XADisk https://xadisk.dev.java.net/). All rights reserved.
+Copyright ? 2010-2011, Nitin Verma (project owner for XADisk https://xadisk.dev.java.net/). All rights reserved.
 
 This source code is being made available to the public under the terms specified in the license
 "Eclipse Public License 1.0" located at http://www.opensource.org/licenses/eclipse-1.0.php.
@@ -86,7 +86,7 @@
             events.add(eventForTransaction);
             ByteBuffer logEntryBytes = ByteBuffer.wrap(TransactionLogEntry.getLogEntry(xidImpl, events,
                     TransactionLogEntry.EVENT_DEQUEUE));
-            xaFileSystem.getTheGatheringDiskWriter().forceLog(logEntryBytes);
+            xaFileSystem.getTheGatheringDiskWriter().forceLog(xidImpl, logEntryBytes);
             xaFileSystem.getTheGatheringDiskWriter().transactionCompletes(xidImpl, true);
             if (isCreatedForRecovery) {
                 xaFileSystem.getRecoveryWorker().cleanupTransactionInfo(xidImpl);


--- work/src/org/xadisk/filesystem/LockTreeNode.java	(revision 557)
+++ work/src/org/xadisk/filesystem/LockTreeNode.java	(working copy)
@@ -1,5 +1,5 @@
 /*
-Copyright © 2010-2011, Nitin Verma (project owner for XADisk https://xadisk.dev.java.net/). All rights reserved.
+Copyright ? 2010-2011, Nitin Verma (project owner for XADisk https://xadisk.dev.java.net/). All rights reserved.
 
 This source code is being made available to the public under the terms specified in the license
 "Eclipse Public License 1.0" located at http://www.opensource.org/licenses/eclipse-1.0.php.
@@ -8,38 +8,67 @@
 package org.xadisk.filesystem;
 
 import java.io.File;
+import java.lang.ref.WeakReference;
+import java.util.ArrayList;
+import java.util.Collection;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.atomic.AtomicReference;
 
 public class LockTreeNode {
-
+    
     private final File path;
     private NativeLock lock;
-    private final ConcurrentHashMap<String, LockTreeNode> children = new ConcurrentHashMap<String, LockTreeNode>();
+    
+    private final ConcurrentHashMap<String, WeakReference<LockTreeNode>> children = 
+            new ConcurrentHashMap<String, WeakReference<LockTreeNode>>();
+    
     private final AtomicReference<TransactionInformation> pinHolder = new AtomicReference<TransactionInformation>(null);
+    private final LockTreeNode parentNode;//to keep a "strong" ref to all the ancestors to protect them from gc.
 
-    LockTreeNode(File path, boolean withExclusiveLock) {
+    LockTreeNode(File path, boolean withExclusiveLock, LockTreeNode parentNode) {
         this.path = path;
-        this.lock = new NativeLock(withExclusiveLock, path);
+        this.lock = new NativeLock(withExclusiveLock, path, this);
+        this.parentNode = parentNode;
     }
 
     LockTreeNode getChild(String name) {
-        LockTreeNode node = children.get(name);
-        if (node != null) {
-            return node;
-        } else {
-            node = new LockTreeNode(new File(path, name), false);
-            LockTreeNode olderValue = children.putIfAbsent(name, node);
-            if(olderValue == null) {
+        WeakReference<LockTreeNode> nodeWR = children.get(name);
+        LockTreeNode node;
+        if (nodeWR != null) {
+            node = nodeWR.get();
+            if(node != null) {
                 return node;
-            } else {
-                return olderValue;
             }
         }
+        node = new LockTreeNode(new File(path, name), false, this);
+        WeakReference<LockTreeNode> newNodeWR =
+                new WeakReference<LockTreeNode>(node);
+        boolean success;
+        if(nodeWR == null) {
+            success = children.putIfAbsent(name, newNodeWR) == null;
+        } else {
+            success = children.replace(name, nodeWR, newNodeWR);
+            //replace wont work with args null, so needed if-else.
+        }
+        if(success) {
+            return node;
+        } else {
+            return getChild(name);
+        }
     }
 
-    LockTreeNode[] getAllChildren() {
-        return children.values().toArray(new LockTreeNode[0]);
+    Collection<LockTreeNode> getAllChildren() {
+        Collection<WeakReference<LockTreeNode>> childrenRef =
+                children.values();
+        ArrayList<LockTreeNode> childrenList = 
+                new ArrayList<LockTreeNode>(childrenRef.size());
+        for(WeakReference<LockTreeNode> childRef: childrenRef) {
+            LockTreeNode child = childRef.get();
+            if(child != null) {
+                childrenList.add(child);
+            }
+        }
+        return childrenList;
     }
     
     boolean isPinnedByOtherTransaction(TransactionInformation thisTransaction) {

--- work/src/org/xadisk/filesystem/NativeConcurrencyControl.java	(revision 557)
+++ work/src/org/xadisk/filesystem/NativeConcurrencyControl.java	(working copy)
@@ -1,5 +1,5 @@
 /*
- Copyright © 2010-2011, Nitin Verma (project owner for XADisk https://xadisk.dev.java.net/). All rights reserved.
+ Copyright ? 2010-2011, Nitin Verma (project owner for XADisk https://xadisk.dev.java.net/). All rights reserved.
 
  This source code is being made available to the public under the terms specified in the license
  "Eclipse Public License 1.0" located at http://www.opensource.org/licenses/eclipse-1.0.php.
@@ -9,9 +9,10 @@
 
 import java.io.File;
 import java.util.ArrayList;
+import java.util.Collection;
 import java.util.HashSet;
-import java.util.Iterator;
 import java.util.List;
+import java.util.concurrent.ConcurrentHashMap;
 import javax.resource.spi.work.WorkException;
 import javax.resource.spi.work.WorkListener;
 import javax.resource.spi.work.WorkManager;
@@ -31,6 +32,8 @@
     private final WorkManager workManager;
     private final DeadLockDetector deadLockDetector;
     private final LockTreeNode rootNode;
+    private final ConcurrentHashMap<File, LockTreeNode> pinnedDirectories =
+            new ConcurrentHashMap<File, LockTreeNode>();
 
     public NativeConcurrencyControl(FileSystemConfiguration configuration, WorkManager workManager,
             WorkListener workListener, NativeXAFileSystem nativeXAFileSystem) throws WorkException {
@@ -38,7 +41,7 @@
         deadLockDetector = new DeadLockDetector(configuration.getDeadLockDetectorInterval(), resourceDependencyGraph,
                 nativeXAFileSystem, this);
         this.workManager = workManager;
-        this.rootNode = new LockTreeNode(null, false);
+        this.rootNode = new LockTreeNode(null, false, null);
         this.workManager.startWork(deadLockDetector, WorkManager.INDEFINITE, null, workListener);
     }
 
@@ -214,17 +217,13 @@
     }
 
     public void releaseRenamePinOnDirectory(File dir) {
-        try {
-            LockTreeNode dirNode = traverseDownToFileNode(dir, false, null);
-            unpinDirectoryTree(dirNode);
-        } catch (AncestorPinnedException ape) {
-            //will never arise due to "false" flag above.
-        }
+        LockTreeNode dirNode = pinnedDirectories.remove(dir);
+        unpinDirectoryTree(dirNode);
     }
 
     private void unpinDirectoryTree(LockTreeNode dirNode) {
         dirNode.releasePin();
-        LockTreeNode children[] = dirNode.getAllChildren();
+        Collection<LockTreeNode> children = dirNode.getAllChildren();
         for (LockTreeNode child : children) {
             child.releasePin();
             unpinDirectoryTree(child);
@@ -235,12 +234,13 @@
             throws DirectoryPinningFailedException, AncestorPinnedException {
         LockTreeNode dirNode = traverseDownToFileNode(dir, true, requestor);
         pinDirectoryTree(dirNode, requestor, dir.getAbsolutePath());
+        pinnedDirectories.put(dir, dirNode);//to keep a "strong" ref to this dirNode.
     }
 
     private void pinDirectoryTree(LockTreeNode dirNode, TransactionInformation requestor, String dirToRename)
             throws DirectoryPinningFailedException {
         pinLockTreeNode(dirNode, requestor, dirToRename);
-        LockTreeNode children[] = dirNode.getAllChildren();
+        Collection<LockTreeNode> children = dirNode.getAllChildren();
         try {
             for (LockTreeNode child : children) {
                 try {


--- work/src/org/xadisk/filesystem/NativeLock.java	(revision 557)
+++ work/src/org/xadisk/filesystem/NativeLock.java	(working copy)
@@ -1,5 +1,5 @@
 /*
-Copyright © 2010-2011, Nitin Verma (project owner for XADisk https://xadisk.dev.java.net/). All rights reserved.
+Copyright ? 2010-2011, Nitin Verma (project owner for XADisk https://xadisk.dev.java.net/). All rights reserved.
 
 This source code is being made available to the public under the terms specified in the license
 "Eclipse Public License 1.0" located at http://www.opensource.org/licenses/eclipse-1.0.php.
@@ -26,10 +26,12 @@
     private final ReentrantLock synchLock = new ReentrantLock(false);
     private final Condition mayBeReadable = synchLock.newCondition();
     private final Condition mayBeWritable = synchLock.newCondition();
+    private final LockTreeNode node;//to keep a "strong" ref to this node, session->allAcquiredLocks->node.
 
-    NativeLock(boolean exclusive, File resource) {
+    NativeLock(boolean exclusive, File resource, LockTreeNode node) {
         this.exclusive = exclusive;
         this.resource = resource;
+        this.node = node;
     }
 
     int getNumHolders() {


--- work/src/org/xadisk/filesystem/NativeSession.java	(revision 557)
+++ work/src/org/xadisk/filesystem/NativeSession.java	(working copy)
@@ -1,5 +1,5 @@
 /*
-Copyright © 2010-2011, Nitin Verma (project owner for XADisk https://xadisk.dev.java.net/). All rights reserved.
+Copyright ? 2010-2011, Nitin Verma (project owner for XADisk https://xadisk.dev.java.net/). All rights reserved.
 
 This source code is being made available to the public under the terms specified in the license
 "Eclipse Public License 1.0" located at http://www.opensource.org/licenses/eclipse-1.0.php.
@@ -789,7 +789,7 @@
         diskSession.forceToDisk();
         try {
             ByteBuffer logEntryBytes = ByteBuffer.wrap(TransactionLogEntry.getLogEntry(xid, currentLogPosition));
-            xaFileSystem.getTheGatheringDiskWriter().forceLog(logEntryBytes);
+            xaFileSystem.getTheGatheringDiskWriter().forceLog(xid, logEntryBytes);
         } catch(IOException ioe) {
             throw new XASystemIOException(ioe);
         }
@@ -1246,7 +1246,7 @@
     public void declareTransactionUsingUndoLogs() throws IOException {
         ByteBuffer logEntryBytes = ByteBuffer.wrap(TransactionLogEntry.getLogEntry(xid,
                 TransactionLogEntry.TXN_USES_UNDO_LOGS));
-        xaFileSystem.getTheGatheringDiskWriter().forceLog(logEntryBytes);
+        xaFileSystem.getTheGatheringDiskWriter().forceLog(xid, logEntryBytes);
     }
 
     public long getTimeOfEntryToTransaction() {


--- work/src/org/xadisk/filesystem/utilities/TransactionLogsUtility.java	(revision 557)
+++ work/src/org/xadisk/filesystem/utilities/TransactionLogsUtility.java	(working copy)
@@ -1,5 +1,5 @@
 /*
-Copyright © 2010-2011, Nitin Verma (project owner for XADisk https://xadisk.dev.java.net/). All rights reserved.
+Copyright ? 2010-2011, Nitin Verma (project owner for XADisk https://xadisk.dev.java.net/). All rights reserved.
 
 This source code is being made available to the public under the terms specified in the license
 "Eclipse Public License 1.0" located at http://www.opensource.org/licenses/eclipse-1.0.php.
@@ -37,15 +37,28 @@
         }
         for (Integer logFileIndex : logsOccupied) {
             Integer numTxns = transactionLogsAndOpenTransactions.get(logFileIndex);
+            if(numTxns == null) {
+                continue;//already deleted.
+            }
             numTxns--;
             if (numTxns == 0 && currentLogIndex != logFileIndex) {
                 durableDiskSession.deleteFileDurably(new File(transactionLogBaseName + "_" + logFileIndex));
+                transactionLogsAndOpenTransactions.remove(logFileIndex);
             } else {
                 transactionLogsAndOpenTransactions.put(logFileIndex, numTxns);
             }
         }
     }
 
+    public static void deleteLastLogIfPossible(int logFileIndex, Map<Integer, Integer> transactionLogsAndOpenTransactions,
+            String transactionLogBaseName, DurableDiskSession durableDiskSession) throws IOException {
+        Integer numTxns = transactionLogsAndOpenTransactions.get(logFileIndex);
+        if (numTxns != null && numTxns == 0) {
+            durableDiskSession.deleteFileDurably(new File(transactionLogBaseName + "_" + logFileIndex));
+            transactionLogsAndOpenTransactions.remove(logFileIndex);
+        }
+    }
+
     public static void trackTransactionLogsUsage(TransactionInformation xid, Map<TransactionInformation, ArrayList<Integer>> transactionsAndLogsOccupied,
             Map<Integer, Integer> transactionLogsAndOpenTransactions, int logFileIndex) {
         boolean txnFirstTimeInThisLog = false;


--- work/src/org/xadisk/filesystem/workers/GatheringDiskWriter.java	(revision 557)
+++ work/src/org/xadisk/filesystem/workers/GatheringDiskWriter.java	(working copy)
@@ -1,5 +1,5 @@
 /*
-Copyright © 2010-2011, Nitin Verma (project owner for XADisk https://xadisk.dev.java.net/). All rights reserved.
+Copyright ? 2010-2011, Nitin Verma (project owner for XADisk https://xadisk.dev.java.net/). All rights reserved.
 
 This source code is being made available to the public under the terms specified in the license
 "Eclipse Public License 1.0" located at http://www.opensource.org/licenses/eclipse-1.0.php.
@@ -166,6 +166,9 @@
                 buffersToMakeOnDisk.add(i);
                 buffersArray[i].setOnDiskInfo(new OnDiskInfo(currentLogIndex, entryPosition));
             } else {
+                //in both cases:if/else, we need to do the below tracking for log-usages.
+                TransactionLogsUtility.trackTransactionLogsUsage(xids[i], transactionsAndLogsOccupied,
+                        transactionLogsAndOpenTransactions, currentLogIndex);
                 addInMemoryBufferToTransaction(xids[i], buffersArray[i]);
             }
             entryPosition += byteBufferArray[i].remaining();
@@ -223,18 +226,18 @@
     public void transactionCommitBegins(TransactionInformation xid) throws IOException {
         ByteBuffer temp = ByteBuffer.wrap(TransactionLogEntry.getLogEntry(xid,
                 TransactionLogEntry.COMMIT_BEGINS));
-        forceWrite(temp);
+        forceWrite(xid, temp);
     }
 
     public void transactionCompletes(TransactionInformation xid, boolean isCommitted) throws IOException {
         ByteBuffer temp = ByteBuffer.wrap(TransactionLogEntry.getLogEntry(xid, isCommitted ? TransactionLogEntry.TXN_COMMIT_DONE : TransactionLogEntry.TXN_ROLLBACK_DONE));
-        forceWrite(temp);
+        forceWrite(xid, temp);
     }
 
     public void transactionPrepareCompletes(TransactionInformation xid) throws IOException {
         ByteBuffer temp = ByteBuffer.wrap(TransactionLogEntry.getLogEntry(xid,
                 TransactionLogEntry.PREPARE_COMPLETES));
-        forceWrite(temp);
+        forceWrite(xid, temp);
     }
 
     public void transactionPrepareCompletesForEventDequeue(TransactionInformation xid, FileSystemStateChangeEvent event) throws IOException {
@@ -242,22 +245,22 @@
         events.add(event);
         ByteBuffer temp = ByteBuffer.wrap(TransactionLogEntry.getLogEntry(xid, events,
                 TransactionLogEntry.PREPARE_COMPLETES_FOR_EVENT_DEQUEUE));
-        forceWrite(temp);
+        forceWrite(xid, temp);
     }
 
     public void recordEndPointActivation(EndPointActivation activation) throws IOException {
         ByteBuffer temp = ByteBuffer.wrap(TransactionLogEntry.getLogEntry(activation,
                 TransactionLogEntry.REMOTE_ENDPOINT_ACTIVATES));
-        forceWrite(temp);
+        forceWrite(null, temp);
     }
 
     public void recordEndPointDeActivation(EndPointActivation activation) throws IOException {
         ByteBuffer temp = ByteBuffer.wrap(TransactionLogEntry.getLogEntry(activation,
                 TransactionLogEntry.REMOTE_ENDPOINT_DEACTIVATES));
-        forceWrite(temp);
+        forceWrite(null, temp);
     }
 
-    public void forceLog(ByteBuffer logEntryHeader) throws IOException {
+    public void forceLog(TransactionInformation xid, ByteBuffer logEntryHeader) throws IOException {
         try {
             transactionLogLock.lock();
             long n = 0;
@@ -267,6 +270,9 @@
                 n += transactionLogChannel.write(logEntryHeader);
             }
             transactionLogChannel.force(false);
+            TransactionLogsUtility.trackTransactionLogsUsage(xid, transactionsAndLogsOccupied,
+                    transactionLogsAndOpenTransactions, currentLogIndex);
+
         } finally {
             transactionLogLock.unlock();
         }
@@ -308,7 +314,7 @@
         }
     }
 
-    private void forceWrite(ByteBuffer buffer) throws IOException {
+    private void forceWrite(TransactionInformation xid, ByteBuffer buffer) throws IOException {
         try {
             transactionLogLock.lock();
             long n = 0;
@@ -318,6 +324,11 @@
                 n += transactionLogChannel.write(buffer);
             }
             transactionLogChannel.force(false);
+            if(xid != null) {
+                //xid passed null for ep(De)Activation.
+                TransactionLogsUtility.trackTransactionLogsUsage(xid, transactionsAndLogsOccupied,
+                    transactionLogsAndOpenTransactions, currentLogIndex);
+            }
         } finally {
             transactionLogLock.unlock();
         }
@@ -326,8 +337,8 @@
     public void cleanupTransactionInfo(TransactionInformation xid) throws IOException {
         try {
             transactionLogLock.lock();
-            TransactionLogsUtility.deleteLogsIfPossible(xid, transactionsAndLogsOccupied, transactionLogsAndOpenTransactions, currentLogIndex, transactionLogBaseName,
-                    xaFileSystem.createDurableDiskSession());
+            TransactionLogsUtility.deleteLogsIfPossible(xid, transactionsAndLogsOccupied, transactionLogsAndOpenTransactions,
+                    currentLogIndex, transactionLogBaseName, xaFileSystem.createDurableDiskSession());
             transactionSubmittedBuffers.remove(xid);//in rollback, this entry remains.
             transactionsAndLogsOccupied.remove(xid);
         } finally {
@@ -347,6 +358,8 @@
                 transactionLogChannel.close();
                 transactionLogChannel =
                         new FileOutputStream(nextTransactionLog, true).getChannel();
+                TransactionLogsUtility.deleteLastLogIfPossible(currentLogIndex, transactionLogsAndOpenTransactions,
+                        transactionLogBaseName, xaFileSystem.createDurableDiskSession());
                 currentLogIndex = i;
                 recordAllActivationsInNewLog();
                 break;
